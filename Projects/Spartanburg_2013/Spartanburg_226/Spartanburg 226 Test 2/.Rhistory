for(x in seq(xmin, xmax, xscale))
lines(x=c(x, x), y=c(ymax, ymax+yinch(mpMedian*ydim)), xpd=NA, col=gridcolor, lwd=lineWidth)
}
}
abline(h=0, lty=1, col=framecolor, lend=endtype, lwd=lineWidth)
abline(v=0, lty=1, col=framecolor, lend=endtype, lwd=lineWidth)
if(!is.na(customaxis)){
rawaxis=list()
#Loading Axis file
if(is.null(rawaxis[[customaxis]])){
cat("   Reading axis file ...\n")
rawaxis=append(rawaxis, list(read.csv(customaxis, header = TRUE, strip.white=TRUE)))
names(rawaxis)[length(rawaxis)]=customaxis
}
customaxisorder=order(rawaxis[[customaxis]][["yaxis"]])
cAxis=data.frame(label=rawaxis[[customaxis]][customaxisorder, "label"], yaxis=rawaxis[[customaxis]][customaxisorder, "yaxis"])
if(is.na(cAxisStart)|is.na(cAxisEnd)){
par(cex=.5)
axis(side=4, at=cAxis[[2]], labels=cAxis[[1]], mgp=c(5,.5,0), tck=.01, las=1, yaxs="i", col=framecolor, col.axis=framecolor, lend=endtype, lwd=0, lwd.ticks=lineWidth, cra=c(12,12))
par(cex=1)
}
for(locs in cAxis[[2]]){
if(!is.na(cAxisStart)&!is.na(cAxisEnd)){
lines(y=c(locs, locs), x=c(cAxisStart, cAxisEnd), lwd=lineWidth)
text(x=cAxisEnd, y=locs, labels=cAxis[[1]][match(locs, cAxis[[2]])], pos=4)
}else
abline(h=locs, lwd=lineWidth)
}
}
}
default=alist(datafile=NULL, vars=NULL, yaxis=NA, timeFile=NA, xaxis="Time (s)", 
pointsAvg=1, fuzziness=0, yMinDisc=NA, yMaxDisc=NA, legendPos=NA,
times=1, maxXtick=7, maxYtick=7, xdim=7, ydim=NA, labelMargin=.04, 
axis2a=NA, suppNames=FALSE, axis2b=0, axis2lab=NA, symbols=10, 
filename="Unnamed", fileSuffix=NA, norm2zero=NA, timelineOffset=FALSE,
legendSize=.75, eventMargin=NA, maxDisp=.15, smoothness=10,
maxOverlap=10, eventLabelBias=.5, plotHeight=NA, endTime=NA, startTime=0,
singleErrorPercent=0, timeOffset=0, dataCut=NA, folder="",
singleEvents=TRUE, continuity=0, primary=.95, secondary=.45, bandwidth=.75,
framecolor="black", endtype="square", legendcols=1, bgcolor="white",
gridcolor="#f0f0f0", eventcolorhi=.8, eventcolorlow=.4, mpMedian=.05, title=NA,
outputType="png", lineWidth=2, dataMax=NA, dpi=600, drawLine=FALSE, 
pointAccent=TRUE, binsize=1, arrowsize=.15, showSamples=FALSE, order=FALSE,
customaxis=NA, customAxisMargin=2, cAxisStart=NA, cAxisEnd=NA, xvar="time",
altyMaxDisc=NA, altyMinDisc=NA, reverseVars=FALSE)
if(!is.null(args[["dataFile"]])){ dataFile=args[["dataFile"]] }
else if(!is.null(args[[1]])){ dataFile=args[[1]] }
else{ cat("A non-Null data file is required.") }
if(is.null(args[["vars"]])){
plots=read.csv(dataFile, header=TRUE, fill=TRUE, blank.lines.skip=TRUE)
entry=dim(plots)[1]
}else{
entry=1
plots=NULL
vars=list(vars)
}
rawdata=list()
rawtimeline=list()
while(entry>=1){
for(variable in names(default)){ assign(variable,default[[variable]]) }
for(variable in names(args[names(args)%in%names(default)])){ assign(variable,args[names(args)%in%names(default)][[variable]]) }
if(!is.null(plots)){
curplot=plots[entry, seq(0, (dim(plots)[2]))]
dataFile=vector()
dataFileTemp=vector()
fileSuffix=vector()
varAverageSet=vector()
vars=list()
altVars=list()
timeOffset=vector()
dataCut=vector()
dataCutTemp=vector()
for(variable in names(curplot)[seq(length(curplot))]){
if(!is.na(curplot[[variable]])&&!is.null(curplot[[variable]]))
if(curplot[[variable]]!="")
if(!is.null(default[[variable]]))
assign(variable, as.vector(curplot[[variable]]))
else if(length(grep("^var[[:punct:]]?[[:digit:]]*$", variable))==1){
if(reverseVars){
vars=append(as.vector(curplot[[variable]]), vars)
altVars=append(FALSE, altVars)
dataFile=append(dataFileTemp, dataFile)
dataCut=append(dataCutTemp, dataCut)
}else{
vars=append(vars, as.vector(curplot[[variable]]))
altVars=append(altVars, FALSE)
dataFile=append(dataFile, dataFileTemp)
dataCut=append(dataCut, dataCutTemp)
}
}else if(length(grep("^avg[[:punct:]]?[[:digit:]]*$", variable))==1){
if(reverseVars)
varAverageSet=append(as.vector(curplot[[variable]]), varAverageSet)
else
varAverageSet=append(varAverageSet, as.vector(curplot[[variable]]))
}else if(length(grep("^alt[[:punct:]]?[[:digit:]]*$", variable))==1){
if(reverseVars){
vars=append(as.vector(curplot[[variable]]), vars)
altVars=append(TRUE, altVars)
dataFile=append(dataFileTemp, dataFile)
dataCut=append(dataCutTemp, dataCut)
}else{
vars=append(vars, as.vector(curplot[[variable]]))
altVars=append(altVars, TRUE)
dataFile=append(dataFile, dataFileTemp)
dataCut=append(dataCut, dataCutTemp)
}
}else if(length(grep("^data[[:punct:]]?[[:digit:]]*$", variable))==1){
dataFileTemp=as.vector(curplot[[variable]])
}else if(length(grep("^suffix[[:punct:]]?[[:digit:]]*$", variable))==1)
if(reverseVars)
fileSuffix=append(as.vector(curplot[[variable]]), fileSuffix)
else
fileSuffix=append(fileSuffix, as.vector(curplot[[variable]]))
else if(length(grep("^line[[:punct:]]?[[:digit:]]*$", variable))==1)
if(reverseVars)
drawLine=append(as.vector(curplot[[variable]]), drawLine)
else
drawLine=append(drawLine, as.vector(curplot[[variable]]))
else if(length(grep("^cutoff[[:punct:]]?[[:digit:]]*$", variable))==1)
dataCutTemp=as.vector(curplot[[variable]])
else if(length(grep("^offset[[:punct:]]?[[:digit:]]*$", variable))==1)
if(reverseVars)
timeOffset=append(as.vector(curplot[[variable]]), timeOffset)
else
timeOffset=append(timeOffset, as.vector(curplot[[variable]]))
}
if(length(drawLine)==1){
temp=vector()
for(i in seq(vars)) temp=append(temp, drawLine)
drawLine=temp
}
}
options(warn=-1)
cat("Rendering", filename, "...\n")
#Creating rendering window for reference only
graphics.off()
if(outputType=="wmf")
win.metafile(paste(paste(folder,filename, sep=""), "wmf", sep="."),xdim,4,12, restoreConsole=FALSE)
if(outputType=="png")
png(paste(paste(folder,filename, sep=""), "png", sep="."),xdim,1,12, units="in",restoreConsole=FALSE, res=dpi)
if(!is.na(axis2a)&&!is.na(axis2b)&&!is.na(axis2lab))
par(fig=c(0, 1, 0, 1), bg=bgcolor, mar=c(3,4,1,4)+.01)
else
par(fig=c(0, 1, 0, 1), bg=bgcolor, mar=c(3,4,1,2)+.01)
for(file in dataFile){
if(is.null(rawdata[[file]])){
cat("   Reading data ")
cat(file)
cat("...\n")
rawdata=append(rawdata, list(read.csv(file , header = TRUE, strip.white=TRUE, check.names=FALSE)))
names(rawdata)[length(rawdata)]=file
}
}
#loading data files
datafiles=1
data=list()
times=list()
totalvars=0
for(file in dataFile){
data=append(data, list(rawdata[[file]]))
vars[datafiles]=list(replace(as.numeric(vars[[datafiles]]), is.na(as.numeric(vars[[datafiles]])),  match(vars[[datafiles]], dimnames(data[[length(data)]])[[2]])))
vars[datafiles]=list(subset(vars[[datafiles]], !is.na(vars[[datafiles]])))
times=append(times, list(charmatch(tolower(xvar), tolower(dimnames(data[[length(data)]])[[2]]))))
if(is.na(times)){
cat("   Invalid X variable.\n")
next
}
if(length(timeOffset)==1)
data[[length(data)]][times[[datafiles]]]=data[[length(data)]][times[[datafiles]]]+as.numeric(timeOffset)
else if(!is.na(timeOffset[datafiles]))
data[[length(data)]][times[[datafiles]]]=data[[length(data)]][times[[datafiles]]]+as.numeric(timeOffset[datafiles])
totalvars=totalvars+dim(data.matrix(vars[[datafiles]]))[1]
datafiles=datafiles+1
}
#Trim data to used variables
datafiles=1
xmax=0
xmin=0
if(!is.na(startTime)){xmin=startTime}
scaledata=FALSE
while(datafiles<=length(data)){
if(!is.na(norm2zero)){
if(!is.null(dim(norm2zero))&&dim(norm2zero)[1]==dim(data.matrix(vars[[datafiles]]))[1]){
norm=norm2zero
}else{
if(norm2zero=="B"){
background=data[[datafiles]][is.na(data[[datafiles]][times[[datafiles]]])|data[[datafiles]][times[[datafiles]]]<=0,seq(dim(data[[datafiles]])[2])]
background[times[[datafiles]]]=seq(0, by=0, length.out=dim(background)[1])
}else{
background=data[[datafiles]][is.na(data[[datafiles]][times[[datafiles]]])|data[[datafiles]][times[[datafiles]]]==0,seq(dim(data[[datafiles]])[2])]
}
}
for(var in seq(2, dim(data[[datafiles]])[2])){
data[[datafiles]][seq(dim(data[[datafiles]])[1]),var]=data[[datafiles]][seq(dim(data[[datafiles]])[1]),var]-mean(data.matrix(background[var]))
}
}
data[datafiles]=list(as.matrix(cbind(data[[datafiles]][times[[datafiles]]], data[[datafiles]][vars[[datafiles]]])))
if(dim(data[[datafiles]])[2]<2){
cat("   Invalid Variable.\n")
datafiles=datafiles+1
next
}
data[[datafiles]]=data[[datafiles]][!is.na(data[[datafiles]][,2]),seq(2)]
if(!is.na(yMaxDisc)&!altVars[[datafiles]])
data[[datafiles]]=data[[datafiles]][data[[datafiles]][,2]<yMaxDisc,seq(2)]
if(length(data[[datafiles]])!=0&!is.na(yMinDisc)&!altVars[[datafiles]])
data[[datafiles]]=data[[datafiles]][data[[datafiles]][,2]>yMinDisc,seq(2)]
if(length(data[[datafiles]])!=0&!is.na(altyMaxDisc)&altVars[[datafiles]])
data[[datafiles]]=data[[datafiles]][data[[datafiles]][,2]<altyMaxDisc,seq(2)]
if(length(data[[datafiles]])!=0&!is.na(altyMinDisc)&altVars[[datafiles]])
data[[datafiles]]=data[[datafiles]][data[[datafiles]][,2]>altyMinDisc,seq(2)]
if(length(data[[datafiles]])==0){
cat("   Variable \"")
cat(dimnames(data[[datafiles]])[[2]][2])
cat("\" contains no usable data.\n")
datafiles=datafiles+1
next
}
vars[datafiles]=list(seq(2,dim(data.matrix(vars[[datafiles]]))[1]+1))
data[datafiles]=list(subset(data[[datafiles]], !is.na(data[[datafiles]][seq(dim(data[[datafiles]])[1])])&data[[datafiles]][seq(dim(data[[datafiles]])[1])]>=startTime))
if(any(altVars[[datafiles]])){
scaledata=TRUE
}
if(!is.na(dataCut[datafiles])){
data[datafiles]=list(subset(data[[datafiles]], data[[datafiles]][seq(dim(data[[datafiles]])[1])]<=dataCut[datafiles]))
}
if(length(dataCut)==1){
data[datafiles]=list(subset(data[[datafiles]], data[[datafiles]][seq(dim(data[[datafiles]])[1])]<=dataCut))
}
if(!is.na(endTime))
xmax=endTime
else
xmax=max(c(xmax, data.matrix(data[[datafiles]][seq(dim(data[[datafiles]])[1])])), rm.na=TRUE)
datafiles=datafiles+1
}
if(xmax==xmin){
cat("   Variable contains trivial data.\n")
dev.off(which = dev.cur())
entry=entry-1
next
}
axisvars=axisscale(xmax, xmin, xmult, xscale, maxXtick)
xmax=axisvars[1]
xmin=axisvars[2]
xmult=axisvars[3]
xscale=axisvars[4]
xmin=floor(xmin/xscale)*xscale
xmax=ceiling(xmax/xscale)*xscale
xticks=(xmax-xmin)/xscale
if(length(varAverageSet)>0){
j = 1
k = 1
datatemp=list()
avgnumber=list()
for(var2avg in data){
var2avg[,1]=round(var2avg[,1]/binsize)*binsize
i = 1
while(i < nrow(var2avg)){
if(length(datatemp)==0){
datatemp=list(var2avg[i,])
avgnumber=list(1)
}else{
if(k <= varAverageSet[j]){
matches=match(var2avg[i,1],as.matrix(datatemp[[j]])[,1])
if(is.na(matches)){
datatemp[[j]]=rbind(datatemp[[j]],var2avg[i,])
avgnumber[[j]]=rbind(avgnumber[[j]],1)
}else{
if(is.null(nrow(datatemp[[j]])))
datatemp[[j]][2]=(datatemp[[j]][2]*avgnumber[[j]][matches]+var2avg[i,2])/(avgnumber[[j]][matches]+1)
else
datatemp[[j]][matches,2]=(datatemp[[j]][matches,2]*avgnumber[[j]][matches]+var2avg[i,2])/(avgnumber[[j]][matches]+1)
avgnumber[[j]][matches]=avgnumber[[j]][matches]+1
}
}else{
datatemp=append(datatemp,list(var2avg[i,]))
avgnumber=append(avgnumber, list(1))
k=1
j=j+1
}
}
i=i+1
}
k=k+1
}
if(showSamples)
data=append(data,datatemp)
else
data=datatemp
totalvars=length(data)
vars=as.list(seq(data)*0+2)
altVars=as.list(as.logical(seq(data)*0))
}
datafiles=1
ymin=0
ymax=0
altymin=0
altymax=0
while(datafiles<=length(data)){
if(length(data[[datafiles]])==0){
datafiles=datafiles+1
next
}
#Average Times and Data into bins, each bin is of size pointsAvg seconds
if(pointsAvg>1){
cat("   Averaging...\n")
reduxdata=vector()
for(n in seq(floor(min(data[[datafiles]][seq(dim(data[[datafiles]])[1])])/pointsAvg), ceiling(max(data[[datafiles]][seq(dim(data[[datafiles]])[1])])/pointsAvg))){
reduxdata=rbind(reduxdata,mean(data.frame(subset(data[[datafiles]], (data[[datafiles]][seq(dim(data[[datafiles]])[1])]<=pointsAvg*n)&(data[[datafiles]][seq(dim(data[[datafiles]])[1])]>pointsAvg*(n-1))), check.names=FALSE), rm.na=TRUE))
}
reduxdata=subset(reduxdata,!is.nan(reduxdata[seq(dim(reduxdata)[1])]))
data[datafiles]=list(reduxdata)
}
if(fuzziness>0){
cat("   Smoothing...\n")
newtimes=seq(from=min(data[[datafiles]][, 1]), to=max(data[[datafiles]][, 1]), length.out=smoothness*dim(data[[datafiles]])[1]-smoothness+1)
oldtimes=data[[datafiles]][, 1]
reduxdata=vector()
if(continuity>0){
oldpoint=data[[datafiles]][1, seq(2, dim(data[[datafiles]])[2])]
for(timeindex in seq(length(newtimes))){
weight=exp(-log((fuzziness+1)/fuzziness)*(oldtimes-newtimes[timeindex])*log((continuity+1)/continuity)*(data[[datafiles]][seq(dim(data[[datafiles]])[1]), seq(2, dim(data[[datafiles]])[2])]-oldpoint))
oldpoint=colSums(weight*data[[datafiles]][seq(dim(data[[datafiles]])[1]), seq(2, dim(data[[datafiles]])[2])])/colSums(weight)
reduxdata=rbind(reduxdata, oldpoint)
}
}else{
for(time in newtimes){
weight=(1+1/fuzziness)^(-abs(oldtimes-time))
reduxdata=rbind(reduxdata, colSums(weight*data[[datafiles]][seq(dim(data[[datafiles]])[1]), seq(2, dim(data[[datafiles]])[2])])/sum(weight))
}
}
reduxdata=cbind(Time=newtimes, reduxdata)
data[datafiles]=list(reduxdata)
}
dataset=as.matrix(data[[datafiles]][, vars[[datafiles]]])
if(singleErrorPercent==0)
barRange=dataset
else
barRange=subset(dataset, data[[datafiles]][seq(dim(data.matrix(dataset))[1])]<(xmax-(xmax-xmin)*.05)&data[[datafiles]][seq(dim(data.matrix(dataset))[1])]>(xmin+(xmax-xmin)*.05))*(1+singleErrorPercent)
datasetDim=seq(dim(dataset)[1])
##Replacing empty data cells with ymin
ymin=min(c(ymin, dataset[ datasetDim, !altVars[[datafiles]] ], barRange[ seq(dim(barRange)[1]), !altVars[[datafiles]] ]))
ymax=max(c(ymax, dataset[ datasetDim, !altVars[[datafiles]] ], barRange[ seq(dim(barRange)[1]), !altVars[[datafiles]] ]))
altymin=min(c(altymin, dataset[ datasetDim, altVars[[datafiles]] ], barRange[ seq(dim(barRange)[1]), altVars[[datafiles]] ]))
altymax=max(c(altymax, dataset[ datasetDim, altVars[[datafiles]] ], barRange[ seq(dim(barRange)[1]), altVars[[datafiles]] ]))
datafiles=datafiles+1
}
if(scaledata)
maxYtick=maxYtick/2
if(!is.na(dataMax))
ymax=dataMax
if(ymax==ymin){
cat("   Variable contains trivial data.\n")
dev.off(which = dev.cur())
entry=entry-1
next
}
axisvars=axisscale(ymax, ymin, ymult, yscale, maxYtick)
ymax=axisvars[1]
ymin=axisvars[2]
ymult=axisvars[3]
yscale=axisvars[4]
if(scaledata){
if(altymax==altymin){
cat("   Variable contains trivial data.\n")
dev.off(which = dev.cur())
entry=entry-1
next
}
axisvars=axisscale(altymax, altymin, altymult, altyscale, maxYtick)
altymax=axisvars[1]
altymin=axisvars[2]
altymult=axisvars[3]
altyscale=axisvars[4]
altymin=floor(altymin/altyscale)*altyscale
altymax=ceiling(altymax/altyscale)*altyscale
altyticks=(altymax-altymin)/altyscale
}
ymin=floor(ymin/yscale)*yscale
ymax=ceiling(ymax/yscale)*yscale
yticks=(ymax-ymin)/yscale
if(is.na(eventMargin)&&!is.na(plotHeight)&&!is.na(ydim)){ eventMargin=ydim-plotHeight-ydim*labelMargin }
if(is.na(eventMargin)){ eventMargin=0 }
if(!is.na(timeFile)){
#Rendering the scatter plot
plot.default(NULL, type="l", ylab=NA, xlim = c(xmin,xmax), ylim = c(ymin,ymax), axes=FALSE, 
frame.plot=FALSE, las=1, tck=.01, mgp=c(3,.5,0), xaxs="i", yaxs="i", font=2)
#Loading Timeline file
if(is.null(rawtimeline[[timeFile]])){
cat("   Reading timeline file ...\n")
rawtimeline=append(rawtimeline, list(read.csv(timeFile, header = TRUE, strip.white=TRUE)))
names(rawtimeline)[length(rawtimeline)]=timeFile
}
eventorder=order(rawtimeline[[timeFile]][["start"]])
if(any(names(rawtimeline[[timeFile]])=="end")){
if(length(timeOffset)==0|!timelineOffset){
timeline=data.frame(event=rawtimeline[[timeFile]][eventorder, "event"], start=rawtimeline[[timeFile]][eventorder, "start"], end=rawtimeline[[timeFile]][eventorder, "end"])
}else{
timeline=data.frame(event=rawtimeline[[timeFile]][eventorder, "event"], start=rawtimeline[[timeFile]][eventorder, "start"]+timeOffset, end=rawtimeline[[timeFile]][eventorder, "end"]+timeOffset)
}
}else{
if(length(timeOffset)==0|!timelineOffset){
timeline=data.frame(event=rawtimeline[[timeFile]][eventorder, "event"], start=rawtimeline[[timeFile]][eventorder, "start"])
}else{
timeline=data.frame(event=rawtimeline[[timeFile]][eventorder, "event"], start=rawtimeline[[timeFile]][eventorder, "start"]+timeOffset)
}
}
timeline=subset(timeline, timeline["start"]<=xmax&timeline["start"]>=xmin)
charHeight=strheight("/_GypL", units="inches")+.05
charWidth=max(strwidth(timeline[["event"]], units="inches"))+.05
overlap=NULL
cat("   Calculating label positions ...\n")
oldMargin=NULL
oldLocs=NULL
oldScore=NULL
oldOverlap=NULL
notPass=TRUE
while(notPass){
notPass=FALSE
eventLocs=eventLocation(xmin, xmax, 0, NA)
if(is.null(eventLocs)){
notPass=TRUE
eventMargin=eventMargin+.1
}else{
#Creating a list of vertical displacements for line structure on timeline data
#they should be maximally spaced in the label margin
overlap=seq(dim(timeline["start"])[1])*0
#First (right) pass of the line offsetting process,
#evaluates whether (left)labels to (right) lines should be displaced further up
n=2
while(n<=length(eventLocs[["location"]])){
if(eventLocs[["location"]][n]<=data.matrix(timeline["start"])[n-1]){
overlap[n]=overlap[n-1]+1
}
n=n+1
}
#Second (left) pass of the line offsetting process
#evaluates whether (right) labels to (left) lines should be displaced further up
n=length(eventLocs[["location"]])-1
while(n>=1){
if(eventLocs[["location"]][n]>=data.matrix(timeline["start"])[n+1]){
overlap[n]=overlap[n+1]+1
}
n=n-1
}
if(max(sqrt(((timeline[["start"]]-eventLocs[["location"]])/(xmax-xmin)/maxDisp)^2+(overlap/maxOverlap)^2))>1){
oldMargin=c(eventMargin, oldMargin)
oldScore=c(max(sqrt(((timeline[["start"]]-eventLocs[["location"]])/(xmax-xmin)/maxDisp)^2+(overlap/maxOverlap)^2)), oldScore)
oldLocs=c(list(eventLocs), oldLocs)
oldOverlap=c(list(overlap), oldOverlap)
notPass=TRUE
eventMargin=eventMargin+.1
if(eventLocs[["theta"]]==pi/2||(!is.na(ydim)&&!is.na(plotHeight)&&eventMargin>=ydim-plotHeight)){
eventLocs=oldLocs[[which.min(oldScore)]]
eventMargin=oldMargin[which.min(oldScore)]
overlap=oldOverlap[[which.min(oldScore)]]
notPass=FALSE
}
}
}
}
}
ydim=createwindow(ydim)
renderplotspace(scaledata, FALSE)
rendergrid(scaledata, FALSE)
if(!is.na(timeFile))
renderablines(scaledata, FALSE)
errorBarX=NULL
errorBarY=NULL
errorBar=rendererrorbar(scaledata, FALSE)
renderpoints(scaledata, FALSE, FALSE)
if(totalvars>1)
renderpoints(scaledata, FALSE, TRUE)
renderaxes(scaledata, FALSE)
renderlegend(scaledata, FALSE, errorBar[[1]], errorBar[[2]])
if(scaledata){
renderplotspace(scaledata, TRUE)
rendergrid(scaledata, TRUE)
if(!is.na(timeFile))
renderablines(scaledata, TRUE)
errorBar=rendererrorbar(scaledata, TRUE)
renderpoints(scaledata, TRUE, FALSE)
renderpoints(scaledata, TRUE, TRUE)
renderaxes(scaledata, TRUE)
renderlegend(scaledata, TRUE, errorBar[[1]], errorBar[[2]])
}
if(!is.na(timeFile))
rendertimeline(scaledata)
renderplotspace(FALSE, TRUE)
mtext(yaxis, side=2, line=3, font=2, col=framecolor)
dev.off(which = dev.cur())
entry=entry-1
}
}
#plotdata("PA Plots 2.csv", maxXtick=10, folder="Plot Output/", lineWidth=2, outputType="png", drawLine=FALSE, maxDisp=.3, framecolor="black")
#plotdata("Mystery Plot Setup.csv", maxXtick=10, folder="Plot Output/", lineWidth=2, framecolor="black", outputType="png", drawLine=FALSE, eventcolorhi=.30, eventcolorlow=.30)
#plotdata("BasementInput.csv", folder="646B_Plots/")
#plotdata("BP plots Avg.csv", folder="Plot Output/")
#plotdata("FOS RAW.csv", folder="", drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
#plotdata("644A_HFinput.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, drawLine=TRUE)
#plotdata("Lawson RFID.csv", arrowsize=NA, outputType="pn")
#plotdata("parkway ter/PT Plot.csv", arrowsize=NA, reverseVars=FALSE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
plotdata("226_test2_input.csv", maxXtick=10, outputType="png", symbols=10, lineWidth=2, maxDisp=100, drawLine=TRUE)
